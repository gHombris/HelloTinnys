"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Sun, Moon, Globe, Heart, Star, Users, Sparkles, Play } from "lucide-react"
import MemoryGame from "@/components/games/memory-game"
import ColorMatchGame from "@/components/games/color-match-game"
import WordPuzzleGame from "@/components/games/word-puzzle-game"
import RhythmGame from "@/components/games/rhythm-game"

type Language = "pt" | "en" | "es" | "fr" | "ru"
type ColorBlindness = "none" | "deuteranopia" | "protanopia" | "tritanopia"
type FontSize = "small" | "medium" | "large"
type Theme = "light" | "dark"
type ActiveTab = "home" | "about" | "characters" | "minigames"
type ActiveGame = "memory" | "colorMatch" | "wordPuzzle" | "rhythm" | null

const translations = {
  pt: {
    title: "Hello Tinny's üéÄ",
    nav: {
      home: "In√≠cio",
      about: "Sobre",
      characters: "Personagens",
      minigames: "Minijogos",
    },
    sidebar: {
      personalization: "Personaliza√ß√£o",
      fontSize: "Tamanho da fonte",
      colorblind: "Daltonismo",
      languages: "Idiomas",
      darkTheme: "Tema escuro",
    },
    home: {
      title: "A Import√¢ncia da Personaliza√ß√£o do Usu√°rio em Sites",
      text: "A personaliza√ß√£o do usu√°rio em sites √© crucial para melhorar a experi√™ncia de navega√ß√£o, tornando o ambiente digital mais acess√≠vel e agrad√°vel. Ao adaptar o site √†s prefer√™ncias individuais dos usu√°rios, como apar√™ncia, idioma e acessibilidade, os desenvolvedores podem atender melhor √†s necessidades de cada pessoa, promovendo uma intera√ß√£o mais satisfat√≥ria e inclusiva.",
    },
    about: {
      title: "Sobre o Hello Tinny's",
      subtitle: "Um projeto dedicado √† acessibilidade e inclus√£o digital",
      mission: "Nossa Miss√£o",
      missionText:
        "Criar experi√™ncias digitais verdadeiramente inclusivas, onde cada usu√°rio pode personalizar sua jornada de acordo com suas necessidades espec√≠ficas. Acreditamos que a tecnologia deve ser acess√≠vel a todos, independentemente de suas habilidades ou prefer√™ncias.",
      values: "Nossos Valores",
      valuesList: [
        "Acessibilidade em primeiro lugar",
        "Design inclusivo e universal",
        "Personaliza√ß√£o centrada no usu√°rio",
        "Tecnologia para todos",
        "Experi√™ncias memor√°veis",
      ],
      team: "Nossa Equipe",
      teamText:
        "Somos um time apaixonado por criar solu√ß√µes que fazem a diferen√ßa na vida das pessoas. Cada membro contribui com sua expertise √∫nica para tornar a web mais acess√≠vel.",
    },
    characters: {
      title: "Conhe√ßa Nossos Personagens",
      subtitle: "Cada personagem representa diferentes aspectos da acessibilidade",
      tinny: {
        name: "Tinny",
        role: "Guia Principal",
        description:
          "Tinny √© nossa mascote principal, sempre pronta para ajudar os usu√°rios a descobrir novas formas de personalizar sua experi√™ncia. Ela representa a curiosidade e a vontade de aprender.",
      },
      luna: {
        name: "Luna",
        role: "Especialista em Temas",
        description:
          "Luna cuida dos temas claro e escuro, garantindo que todos tenham uma experi√™ncia visual confort√°vel. Ela entende a import√¢ncia do contraste e da legibilidade.",
      },
      pixel: {
        name: "Pixel",
        role: "Mestre dos Jogos",
        description:
          "Pixel √© respons√°vel pelos minijogos e atividades interativas. Ele garante que todos os jogos sejam acess√≠veis e divertidos para pessoas com diferentes habilidades.",
      },
      iris: {
        name: "Iris",
        role: "Especialista em Cores",
        description:
          "Iris ajuda usu√°rios com daltonismo, oferecendo diferentes filtros de cor para garantir que todos possam ver e interagir com o conte√∫do de forma clara.",
      },
    },
    minigames: {
      title: "Minijogos Acess√≠veis",
      subtitle: "Divers√£o para todos, com foco em acessibilidade",
      memoryGame: {
        name: "Jogo da Mem√≥ria",
        difficulty: "F√°cil",
        description:
          "Um cl√°ssico jogo da mem√≥ria com suporte a navega√ß√£o por teclado e descri√ß√µes de √°udio para cada carta.",
        features: ["Navega√ß√£o por teclado", "√Åudio descritivo", "Diferentes n√≠veis"],
      },
      colorMatch: {
        name: "Combina√ß√£o de Cores",
        difficulty: "M√©dio",
        description:
          "Combine cores e formas neste jogo que se adapta automaticamente aos filtros de daltonismo ativados.",
        features: ["Adapt√°vel ao daltonismo", "Feedback t√°til", "M√∫ltiplos modos"],
      },
      wordPuzzle: {
        name: "Quebra-cabe√ßa de Palavras",
        difficulty: "M√©dio",
        description: "Encontre palavras escondidas com suporte completo a leitores de tela e m√∫ltiplos idiomas.",
        features: ["Multil√≠ngue", "Leitor de tela", "Dicas sonoras"],
      },
      rhythmGame: {
        name: "Jogo de Ritmo",
        difficulty: "Dif√≠cil",
        description:
          "Siga o ritmo com feedback visual e t√°til, perfeito para usu√°rios com diferentes necessidades sensoriais.",
        features: ["Feedback visual", "Vibra√ß√£o", "Controles adaptativos"],
      },
    },
    colorblindOptions: {
      deuteranopia: "Deuteranopia",
      protanopia: "Protanopia",
      tritanopia: "Tritanopia",
    },
    languageOptions: {
      pt: "Portugu√™s",
      en: "English",
      es: "Spanish",
      fr: "Fran√ßais",
      ru: "Russo",
    },
    fontSizes: {
      small: "Pequeno",
      medium: "M√©dio",
      large: "Grande",
    },
    common: {
      play: "Jogar",
      difficulty: "Dificuldade",
      features: "Caracter√≠sticas",
    },
  },
  en: {
    title: "Hello Tinny's üéÄ",
    nav: {
      home: "Home",
      about: "About",
      characters: "Characters",
      minigames: "Minigames",
    },
    sidebar: {
      personalization: "Personalization",
      fontSize: "Font size",
      colorblind: "Color blindness",
      languages: "Languages",
      darkTheme: "Dark theme",
    },
    home: {
      title: "The Importance of User Personalization on Websites",
      text: "User personalization on websites is crucial for improving the browsing experience, making the digital environment more accessible and pleasant. By adapting the site to individual user preferences, such as appearance, language and accessibility, developers can better meet the needs of each person, promoting a more satisfactory and inclusive interaction.",
    },
    about: {
      title: "About Hello Tinny's",
      subtitle: "A project dedicated to accessibility and digital inclusion",
      mission: "Our Mission",
      missionText:
        "Create truly inclusive digital experiences, where each user can customize their journey according to their specific needs. We believe technology should be accessible to everyone, regardless of their abilities or preferences.",
      values: "Our Values",
      valuesList: [
        "Accessibility first",
        "Inclusive and universal design",
        "User-centered personalization",
        "Technology for everyone",
        "Memorable experiences",
      ],
      team: "Our Team",
      teamText:
        "We are a team passionate about creating solutions that make a difference in people's lives. Each member contributes their unique expertise to make the web more accessible.",
    },
    characters: {
      title: "Meet Our Characters",
      subtitle: "Each character represents different aspects of accessibility",
      tinny: {
        name: "Tinny",
        role: "Main Guide",
        description:
          "Tinny is our main mascot, always ready to help users discover new ways to customize their experience. She represents curiosity and the desire to learn.",
      },
      luna: {
        name: "Luna",
        role: "Theme Specialist",
        description:
          "Luna takes care of light and dark themes, ensuring everyone has a comfortable visual experience. She understands the importance of contrast and readability.",
      },
      pixel: {
        name: "Pixel",
        role: "Game Master",
        description:
          "Pixel is responsible for minigames and interactive activities. He ensures all games are accessible and fun for people with different abilities.",
      },
      iris: {
        name: "Iris",
        role: "Color Specialist",
        description:
          "Iris helps users with color blindness, offering different color filters to ensure everyone can see and interact with content clearly.",
      },
    },
    minigames: {
      title: "Accessible Minigames",
      subtitle: "Fun for everyone, with focus on accessibility",
      memoryGame: {
        name: "Memory Game",
        difficulty: "Easy",
        description: "A classic memory game with keyboard navigation support and audio descriptions for each card.",
        features: ["Keyboard navigation", "Audio description", "Different levels"],
      },
      colorMatch: {
        name: "Color Match",
        difficulty: "Medium",
        description: "Match colors and shapes in this game that automatically adapts to activated colorblind filters.",
        features: ["Colorblind adaptive", "Haptic feedback", "Multiple modes"],
      },
      wordPuzzle: {
        name: "Word Puzzle",
        difficulty: "Medium",
        description: "Find hidden words with full screen reader support and multiple languages.",
        features: ["Multilingual", "Screen reader", "Audio hints"],
      },
      rhythmGame: {
        name: "Rhythm Game",
        difficulty: "Hard",
        description:
          "Follow the rhythm with visual and haptic feedback, perfect for users with different sensory needs.",
        features: ["Visual feedback", "Vibration", "Adaptive controls"],
      },
    },
    colorblindOptions: {
      deuteranopia: "Deuteranopia",
      protanopia: "Protanopia",
      tritanopia: "Tritanopia",
    },
    languageOptions: {
      pt: "Portuguese",
      en: "English",
      es: "Spanish",
      fr: "French",
      ru: "Russian",
    },
    fontSizes: {
      small: "Small",
      medium: "Medium",
      large: "Large",
    },
    common: {
      play: "Play",
      difficulty: "Difficulty",
      features: "Features",
    },
  },
  es: {
    title: "Hello Tinny's üéÄ",
    nav: {
      home: "Inicio",
      about: "Acerca de",
      characters: "Personajes",
      minigames: "Minijuegos",
    },
    sidebar: {
      personalization: "Personalizaci√≥n",
      fontSize: "Tama√±o de fuente",
      colorblind: "Daltonismo",
      languages: "Idiomas",
      darkTheme: "Tema oscuro",
    },
    home: {
      title: "La Importancia de la Personalizaci√≥n del Usuario en Sitios Web",
      text: "La personalizaci√≥n del usuario en sitios web es crucial para mejorar la experiencia de navegaci√≥n, haciendo el ambiente digital m√°s accesible y agradable. Al adaptar el sitio a las preferencias individuales de los usuarios, como apariencia, idioma y accesibilidad, los desarrolladores pueden atender mejor las necesidades de cada persona, promoviendo una interacci√≥n m√°s satisfactoria e inclusiva.",
    },
    about: {
      title: "Acerca de Hello Tinny's",
      subtitle: "Un proyecto dedicado a la accesibilidad e inclusi√≥n digital",
      mission: "Nuestra Misi√≥n",
      missionText:
        "Crear experiencias digitales verdaderamente inclusivas, donde cada usuario pueda personalizar su viaje seg√∫n sus necesidades espec√≠ficas. Creemos que la tecnolog√≠a debe ser accesible para todos, independientemente de sus habilidades o preferencias.",
      values: "Nuestros Valores",
      valuesList: [
        "Accesibilidad primero",
        "Dise√±o inclusivo y universal",
        "Personalizaci√≥n centrada en el usuario",
        "Tecnolog√≠a para todos",
        "Experiencias memorables",
      ],
      team: "Nuestro Equipo",
      teamText:
        "Somos un equipo apasionado por crear soluciones que marcan la diferencia en la vida de las personas. Cada miembro contribuye con su experiencia √∫nica para hacer la web m√°s accesible.",
    },
    characters: {
      title: "Conoce Nuestros Personajes",
      subtitle: "Cada personaje representa diferentes aspectos de la accesibilidad",
      tinny: {
        name: "Tinny",
        role: "Gu√≠a Principal",
        description:
          "Tinny es nuestra mascota principal, siempre lista para ayudar a los usuarios a descubrir nuevas formas de personalizar su experiencia. Representa la curiosidad y el deseo de aprender.",
      },
      luna: {
        name: "Luna",
        role: "Especialista en Temas",
        description:
          "Luna se encarga de los temas claro y oscuro, asegurando que todos tengan una experiencia visual c√≥moda. Entiende la importancia del contraste y la legibilidad.",
      },
      pixel: {
        name: "Pixel",
        role: "Maestro de Juegos",
        description:
          "Pixel es responsable de los minijuegos y actividades interactivas. Se asegura de que todos los juegos sean accesibles y divertidos para personas con diferentes habilidades.",
      },
      iris: {
        name: "Iris",
        role: "Especialista en Colores",
        description:
          "Iris ayuda a usuarios con daltonismo, ofreciendo diferentes filtros de color para asegurar que todos puedan ver e interactuar con el contenido claramente.",
      },
    },
    minigames: {
      title: "Minijuegos Accesibles",
      subtitle: "Diversi√≥n para todos, con enfoque en accesibilidad",
      memoryGame: {
        name: "Juego de Memoria",
        difficulty: "F√°cil",
        description:
          "Un cl√°sico juego de memoria con soporte de navegaci√≥n por teclado y descripciones de audio para cada carta.",
        features: ["Navegaci√≥n por teclado", "Descripci√≥n de audio", "Diferentes niveles"],
      },
      colorMatch: {
        name: "Combinaci√≥n de Colores",
        difficulty: "Medio",
        description:
          "Combina colores y formas en este juego que se adapta autom√°ticamente a los filtros de daltonismo activados.",
        features: ["Adaptable al daltonismo", "Retroalimentaci√≥n t√°ctil", "M√∫ltiples modos"],
      },
      wordPuzzle: {
        name: "Rompecabezas de Palabras",
        difficulty: "Medio",
        description: "Encuentra palabras ocultas con soporte completo para lectores de pantalla y m√∫ltiples idiomas.",
        features: ["Multiling√ºe", "Lector de pantalla", "Pistas de audio"],
      },
      rhythmGame: {
        name: "Juego de Ritmo",
        difficulty: "Dif√≠cil",
        description:
          "Sigue el ritmo con retroalimentaci√≥n visual y t√°ctil, perfecto para usuarios con diferentes necesidades sensoriales.",
        features: ["Retroalimentaci√≥n visual", "Vibraci√≥n", "Controles adaptativos"],
      },
    },
    colorblindOptions: {
      deuteranopia: "Deuteranopia",
      protanopia: "Protanopia",
      tritanopia: "Tritanopia",
    },
    languageOptions: {
      pt: "Portugu√©s",
      en: "Ingl√©s",
      es: "Espa√±ol",
      fr: "Franc√©s",
      ru: "Ruso",
    },
    fontSizes: {
      small: "Peque√±o",
      medium: "Mediano",
      large: "Grande",
    },
    common: {
      play: "Jugar",
      difficulty: "Dificultad",
      features: "Caracter√≠sticas",
    },
  },
  fr: {
    title: "Hello Tinny's üéÄ",
    nav: {
      home: "Accueil",
      about: "√Ä propos",
      characters: "Personnages",
      minigames: "Mini-jeux",
    },
    sidebar: {
      personalization: "Personnalisation",
      fontSize: "Taille de police",
      colorblind: "Daltonisme",
      languages: "Langues",
      darkTheme: "Th√®me sombre",
    },
    home: {
      title: "L'Importance de la Personnalisation Utilisateur sur les Sites Web",
      text: "La personnalisation utilisateur sur les sites web est cruciale pour am√©liorer l'exp√©rience de navigation, rendant l'environnement num√©rique plus accessible et agr√©able. En adaptant le site aux pr√©f√©rences individuelles des utilisateurs, comme l'apparence, la langue et l'accessibilit√©, les d√©veloppeurs peuvent mieux r√©pondre aux besoins de chaque personne, favorisant une interaction plus satisfaisante et inclusive.",
    },
    about: {
      title: "√Ä propos de Hello Tinny's",
      subtitle: "Un projet d√©di√© √† l'accessibilit√© et √† l'inclusion num√©rique",
      mission: "Notre Mission",
      missionText:
        "Cr√©er des exp√©riences num√©riques v√©ritablement inclusives, o√π chaque utilisateur peut personnaliser son parcours selon ses besoins sp√©cifiques. Nous croyons que la technologie doit √™tre accessible √† tous, ind√©pendamment de leurs capacit√©s ou pr√©f√©rences.",
      values: "Nos Valeurs",
      valuesList: [
        "Accessibilit√© d'abord",
        "Design inclusif et universel",
        "Personnalisation centr√©e sur l'utilisateur",
        "Technologie pour tous",
        "Exp√©riences m√©morables",
      ],
      team: "Notre √âquipe",
      teamText:
        "Nous sommes une √©quipe passionn√©e par la cr√©ation de solutions qui font la diff√©rence dans la vie des gens. Chaque membre apporte son expertise unique pour rendre le web plus accessible.",
    },
    characters: {
      title: "Rencontrez Nos Personnages",
      subtitle: "Chaque personnage repr√©sente diff√©rents aspects de l'accessibilit√©",
      tinny: {
        name: "Tinny",
        role: "Guide Principal",
        description:
          "Tinny est notre mascotte principale, toujours pr√™te √† aider les utilisateurs √† d√©couvrir de nouvelles fa√ßons de personnaliser leur exp√©rience. Elle repr√©sente la curiosit√© et le d√©sir d'apprendre.",
      },
      luna: {
        name: "Luna",
        role: "Sp√©cialiste des Th√®mes",
        description:
          "Luna s'occupe des th√®mes clair et sombre, s'assurant que chacun ait une exp√©rience visuelle confortable. Elle comprend l'importance du contraste et de la lisibilit√©.",
      },
      pixel: {
        name: "Pixel",
        role: "Ma√Ætre des Jeux",
        description:
          "Pixel est responsable des mini-jeux et activit√©s interactives. Il s'assure que tous les jeux soient accessibles et amusants pour les personnes avec diff√©rentes capacit√©s.",
      },
      iris: {
        name: "Iris",
        role: "Sp√©cialiste des Couleurs",
        description:
          "Iris aide les utilisateurs avec daltonisme, offrant diff√©rents filtres de couleur pour s'assurer que tous puissent voir et interagir avec le contenu clairement.",
      },
    },
    minigames: {
      title: "Mini-jeux Accessibles",
      subtitle: "Amusement pour tous, avec focus sur l'accessibilit√©",
      memoryGame: {
        name: "Jeu de M√©moire",
        difficulty: "Facile",
        description:
          "Un jeu de m√©moire classique avec support de navigation au clavier et descriptions audio pour chaque carte.",
        features: ["Navigation au clavier", "Description audio", "Diff√©rents niveaux"],
      },
      colorMatch: {
        name: "Correspondance de Couleurs",
        difficulty: "Moyen",
        description:
          "Associez couleurs et formes dans ce jeu qui s'adapte automatiquement aux filtres de daltonisme activ√©s.",
        features: ["Adaptable au daltonisme", "Retour tactile", "Modes multiples"],
      },
      wordPuzzle: {
        name: "Puzzle de Mots",
        difficulty: "Moyen",
        description: "Trouvez des mots cach√©s avec support complet pour lecteurs d'√©cran et langues multiples.",
        features: ["Multilingue", "Lecteur d'√©cran", "Indices audio"],
      },
      rhythmGame: {
        name: "Jeu de Rythme",
        difficulty: "Difficile",
        description:
          "Suivez le rythme avec retour visuel et tactile, parfait pour utilisateurs avec diff√©rents besoins sensoriels.",
        features: ["Retour visuel", "Vibration", "Contr√¥les adaptatifs"],
      },
    },
    colorblindOptions: {
      deuteranopia: "Deut√©ranopie",
      protanopia: "Protanopie",
      tritanopia: "Tritanopie",
    },
    languageOptions: {
      pt: "Portugais",
      en: "Anglais",
      es: "Espagnol",
      fr: "Fran√ßais",
      ru: "Russe",
    },
    fontSizes: {
      small: "Petit",
      medium: "Moyen",
      large: "Grand",
    },
    common: {
      play: "Jouer",
      difficulty: "Difficult√©",
      features: "Caract√©ristiques",
    },
  },
  ru: {
    title: "Hello Tinny's üéÄ",
    nav: {
      home: "–ì–ª–∞–≤–Ω–∞—è",
      about: "–û –Ω–∞—Å",
      characters: "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏",
      minigames: "–ú–∏–Ω–∏-–∏–≥—Ä—ã",
    },
    sidebar: {
      personalization: "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
      fontSize: "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞",
      colorblind: "–î–∞–ª—å—Ç–æ–Ω–∏–∑–º",
      languages: "–Ø–∑—ã–∫–∏",
      darkTheme: "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
    },
    home: {
      title: "–í–∞–∂–Ω–æ—Å—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –í–µ–±-—Å–∞–π—Ç–∞—Ö",
      text: "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–∞—Ö –∏–º–µ–µ—Ç —Ä–µ—à–∞—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –¥–µ–ª–∞—è —Ü–∏—Ñ—Ä–æ–≤—É—é —Å—Ä–µ–¥—É –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏ –ø—Ä–∏—è—Ç–Ω–æ–π. –ê–¥–∞–ø—Ç–∏—Ä—É—è —Å–∞–π—Ç –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫–∏–º –∫–∞–∫ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, —è–∑—ã–∫ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –ª—É—á—à–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—è –±–æ–ª–µ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –∏ –∏–Ω–∫–ª—é–∑–∏–≤–Ω–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é.",
    },
    about: {
      title: "–û Hello Tinny's",
      subtitle: "–ü—Ä–æ–µ–∫—Ç, –ø–æ—Å–≤—è—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–Ω–∫–ª—é–∑–∏–∏",
      mission: "–ù–∞—à–∞ –ú–∏—Å—Å–∏—è",
      missionText:
        "–°–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –æ–ø—ã—Ç—ã, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏. –ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.",
      values: "–ù–∞—à–∏ –¶–µ–Ω–Ω–æ—Å—Ç–∏",
      valuesList: [
        "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ",
        "–ò–Ω–∫–ª—é–∑–∏–≤–Ω—ã–π –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω",
        "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –≤—Å–µ—Ö",
        "–ù–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è",
      ],
      team: "–ù–∞—à–∞ –ö–æ–º–∞–Ω–¥–∞",
      teamText:
        "–ú—ã –∫–æ–º–∞–Ω–¥–∞, —É–≤–ª–µ—á–µ–Ω–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –∂–∏–∑–Ω—å –ª—é–¥–µ–π –∫ –ª—É—á—à–µ–º—É. –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤–Ω–æ—Å–∏—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–µ–± –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º.",
    },
    characters: {
      title: "–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ù–∞—à–∏–º–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏",
      subtitle: "–ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
      tinny: {
        name: "–¢–∏–Ω–Ω–∏",
        role: "–ì–ª–∞–≤–Ω—ã–π –ì–∏–¥",
        description:
          "–¢–∏–Ω–Ω–∏ - –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Ö –æ–ø—ã—Ç–∞. –û–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –∂–µ–ª–∞–Ω–∏–µ —É—á–∏—Ç—å—Å—è.",
      },
      luna: {
        name: "–õ—É–Ω–∞",
        role: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¢–µ–º–∞–º",
        description:
          "–õ—É–Ω–∞ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–≤–µ—Ç–ª—ã—Ö –∏ —Ç–µ–º–Ω—ã—Ö —Ç–µ–º–∞—Ö, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—Å–µ–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç. –û–Ω–∞ –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.",
      },
      pixel: {
        name: "–ü–∏–∫—Å–µ–ª—å",
        role: "–ú–∞—Å—Ç–µ—Ä –ò–≥—Ä",
        description:
          "–ü–∏–∫—Å–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–Ω –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –≤–µ—Å–µ–ª—å–µ –≤—Å–µ—Ö –∏–≥—Ä –¥–ª—è –ª—é–¥–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏.",
      },
      iris: {
        name: "–ò—Ä–∏—Å",
        role: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¶–≤–µ—Ç–∞–º",
        description:
          "–ò—Ä–∏—Å –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–∞–ª—å—Ç–æ–Ω–∏–∑–º–æ–º, –ø—Ä–µ–¥–ª–∞–≥–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ–±—ã –≤—Å–µ –º–æ–≥–ª–∏ —á–µ—Ç–∫–æ –≤–∏–¥–µ—Ç—å –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.",
      },
    },
    minigames: {
      title: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ú–∏–Ω–∏-–∏–≥—Ä—ã",
      subtitle: "–í–µ—Å–µ–ª—å–µ –¥–ª—è –≤—Å–µ—Ö, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
      memoryGame: {
        name: "–ò–≥—Ä–∞ –Ω–∞ –ü–∞–º—è—Ç—å",
        difficulty: "–õ–µ–≥–∫–æ",
        description:
          "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –Ω–∞ –ø–∞–º—è—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∞—É–¥–∏–æ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã.",
        features: ["–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", "–ê—É–¥–∏–æ –æ–ø–∏—Å–∞–Ω–∏–µ", "–†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏"],
      },
      colorMatch: {
        name: "–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¶–≤–µ—Ç–æ–≤",
        difficulty: "–°—Ä–µ–¥–Ω–µ",
        description:
          "–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ—Ä–º—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–∞–ª—å—Ç–æ–Ω–∏–∑–º–∞.",
        features: ["–ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –∫ –¥–∞–ª—å—Ç–æ–Ω–∏–∑–º—É", "–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã"],
      },
      wordPuzzle: {
        name: "–°–ª–æ–≤–µ—Å–Ω–∞—è –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞",
        difficulty: "–°—Ä–µ–¥–Ω–µ",
        description: "–ù–∞–π–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º —á—Ç–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∞ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏.",
        features: ["–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —á—Ç–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞", "–ó–≤—É–∫–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"],
      },
      rhythmGame: {
        name: "–†–∏—Ç–º–∏—á–µ—Å–∫–∞—è –ò–≥—Ä–∞",
        difficulty: "–°–ª–æ–∂–Ω–æ",
        description:
          "–°–ª–µ–¥—É–π—Ç–µ —Ä–∏—Ç–º—É —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏.",
        features: ["–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "–í–∏–±—Ä–∞—Ü–∏—è", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"],
      },
    },
    colorblindOptions: {
      deuteranopia: "–î–µ–π—Ç–µ—Ä–∞–Ω–æ–ø–∏—è",
      protanopia: "–ü—Ä–æ—Ç–∞–Ω–æ–ø–∏—è",
      tritanopia: "–¢—Ä–∏—Ç–∞–Ω–æ–ø–∏—è",
    },
    languageOptions: {
      pt: "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
      en: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
      es: "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
      fr: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
      ru: "–†—É—Å—Å–∫–∏–π",
    },
    fontSizes: {
      small: "–ú–∞–ª–µ–Ω—å–∫–∏–π",
      medium: "–°—Ä–µ–¥–Ω–∏–π",
      large: "–ë–æ–ª—å—à–æ–π",
    },
    common: {
      play: "–ò–≥—Ä–∞—Ç—å",
      difficulty: "–°–ª–æ–∂–Ω–æ—Å—Ç—å",
      features: "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
    },
  },
}

export default function Component() {
  const [language, setLanguage] = useState<Language>("pt")
  const [theme, setTheme] = useState<Theme>("light")
  const [fontSize, setFontSize] = useState<FontSize>("medium")
  const [colorBlindness, setColorBlindness] = useState<ColorBlindness>("none")
  const [activeTab, setActiveTab] = useState<ActiveTab>("home")
  const [activeGame, setActiveGame] = useState<ActiveGame>(null)

  const t = translations[language]

  const getFontSizeClass = () => {
    switch (fontSize) {
      case "small":
        return "text-sm"
      case "medium":
        return "text-base"
      case "large":
        return "text-lg"
      default:
        return "text-base"
    }
  }

  const getColorBlindnessFilter = () => {
    switch (colorBlindness) {
      case "deuteranopia":
        return "hue-rotate-[240deg] saturate-50"
      case "protanopia":
        return "hue-rotate-[180deg] saturate-75"
      case "tritanopia":
        return "hue-rotate-[60deg] saturate-50"
      default:
        return ""
    }
  }

  const themeClasses =
    theme === "dark" ? "bg-gray-900 text-white" : "bg-gradient-to-br from-pink-300 via-pink-400 to-pink-500 text-white"

  const sidebarClasses = theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-pink-400/80 backdrop-blur-sm"

  const cardClasses =
    theme === "dark" ? "bg-gray-700 border-gray-600 text-white" : "bg-pink-300/60 backdrop-blur-sm border-pink-200"

  const openGame = (gameType: ActiveGame) => {
    setActiveGame(gameType)
  }

  const closeGame = () => {
    setActiveGame(null)
  }

  const renderContent = () => {
    switch (activeTab) {
      case "home":
        return (
          <Card className={`max-w-4xl mx-auto p-8 rounded-3xl ${cardClasses}`}>
            <h1 className="text-3xl font-bold text-center mb-8">{t.home.title}</h1>
            <p className="text-lg leading-relaxed text-center">{t.home.text}</p>
          </Card>
        )

      case "about":
        return (
          <div className="max-w-4xl mx-auto space-y-8">
            <Card className={`p-8 rounded-3xl ${cardClasses}`}>
              <h1 className="text-3xl font-bold text-center mb-4">{t.about.title}</h1>
              <p className="text-lg text-center mb-8 opacity-90">{t.about.subtitle}</p>

              <div className="grid md:grid-cols-2 gap-8">
                <div>
                  <div className="flex items-center gap-2 mb-4">
                    <Heart className="w-6 h-6" />
                    <h2 className="text-xl font-bold">{t.about.mission}</h2>
                  </div>
                  <p className="leading-relaxed">{t.about.missionText}</p>
                </div>

                <div>
                  <div className="flex items-center gap-2 mb-4">
                    <Users className="w-6 h-6" />
                    <h2 className="text-xl font-bold">{t.about.team}</h2>
                  </div>
                  <p className="leading-relaxed">{t.about.teamText}</p>
                </div>
              </div>
            </Card>

            <Card className={`p-8 rounded-3xl ${cardClasses}`}>
              <div className="flex items-center gap-2 mb-6">
                <Star className="w-6 h-6" />
                <h2 className="text-2xl font-bold">{t.about.values}</h2>
              </div>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {t.about.valuesList.map((value, index) => (
                  <div key={index} className="flex items-center gap-2 p-3 rounded-lg bg-white/10">
                    <Sparkles className="w-4 h-4" />
                    <span>{value}</span>
                  </div>
                ))}
              </div>
            </Card>
          </div>
        )

      case "characters":
        const characters = [
          { key: "tinny", icon: "üéÄ", color: "bg-pink-500" },
          { key: "luna", icon: "üåô", color: "bg-purple-500" },
          { key: "pixel", icon: "üéÆ", color: "bg-blue-500" },
          { key: "iris", icon: "üåà", color: "bg-green-500" },
        ]

        return (
          <div className="max-w-6xl mx-auto space-y-8">
            <Card className={`p-8 rounded-3xl ${cardClasses} text-center`}>
              <h1 className="text-3xl font-bold mb-4">{t.characters.title}</h1>
              <p className="text-lg opacity-90">{t.characters.subtitle}</p>
            </Card>

            <div className="grid md:grid-cols-2 gap-6">
              {characters.map((char) => {
                const charData = t.characters[char.key as keyof typeof t.characters] as any
                return (
                  <Card key={char.key} className={`p-6 rounded-3xl ${cardClasses}`}>
                    <div className="flex items-start gap-4">
                      <div className={`w-16 h-16 rounded-full ${char.color} flex items-center justify-center text-2xl`}>
                        {char.icon}
                      </div>
                      <div className="flex-1">
                        <h3 className="text-xl font-bold mb-1">{charData.name}</h3>
                        <Badge variant="secondary" className="mb-3 bg-white/20 text-white">
                          {charData.role}
                        </Badge>
                        <p className="leading-relaxed">{charData.description}</p>
                      </div>
                    </div>
                  </Card>
                )
              })}
            </div>
          </div>
        )

      case "minigames":
        const games = [
          { key: "memoryGame", icon: "üß†", difficulty: "easy", gameType: "memory" as ActiveGame },
          { key: "colorMatch", icon: "üé®", difficulty: "medium", gameType: "colorMatch" as ActiveGame },
          { key: "wordPuzzle", icon: "üìù", difficulty: "medium", gameType: "wordPuzzle" as ActiveGame },
          { key: "rhythmGame", icon: "üéµ", difficulty: "hard", gameType: "rhythm" as ActiveGame },
        ]

        const getDifficultyColor = (difficulty: string) => {
          switch (difficulty) {
            case "easy":
              return "bg-green-500"
            case "medium":
              return "bg-yellow-500"
            case "hard":
              return "bg-red-500"
            default:
              return "bg-gray-500"
          }
        }

        return (
          <div className="max-w-6xl mx-auto space-y-8">
            <Card className={`p-8 rounded-3xl ${cardClasses} text-center`}>
              <h1 className="text-3xl font-bold mb-4">{t.minigames.title}</h1>
              <p className="text-lg opacity-90">{t.minigames.subtitle}</p>
            </Card>

            <div className="grid md:grid-cols-2 gap-6">
              {games.map((game) => {
                const gameData = t.minigames[game.key as keyof typeof t.minigames] as any
                return (
                  <Card key={game.key} className={`p-6 rounded-3xl ${cardClasses}`}>
                    <div className="flex items-start gap-4 mb-4">
                      <div className="w-16 h-16 rounded-full bg-white/20 flex items-center justify-center text-2xl">
                        {game.icon}
                      </div>
                      <div className="flex-1">
                        <h3 className="text-xl font-bold mb-2">{gameData.name}</h3>
                        <div className="flex items-center gap-2 mb-3">
                          <span className="text-sm">{t.common.difficulty}:</span>
                          <Badge className={`${getDifficultyColor(game.difficulty)} text-white`}>
                            {gameData.difficulty}
                          </Badge>
                        </div>
                        <p className="leading-relaxed mb-4">{gameData.description}</p>
                      </div>
                    </div>

                    <div className="mb-4">
                      <h4 className="font-semibold mb-2 flex items-center gap-2">
                        <Sparkles className="w-4 h-4" />
                        {t.common.features}:
                      </h4>
                      <div className="flex flex-wrap gap-2">
                        {gameData.features.map((feature: string, index: number) => (
                          <Badge key={index} variant="outline" className="bg-white/10 text-white border-white/30">
                            {feature}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    <Button
                      className="w-full bg-white/20 hover:bg-white/30 text-white border-white/30"
                      onClick={() => openGame(game.gameType)}
                    >
                      <Play className="w-4 h-4 mr-2" />
                      {t.common.play}
                    </Button>
                  </Card>
                )
              })}
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className={`min-h-screen ${themeClasses} ${getColorBlindnessFilter()} ${getFontSizeClass()}`}>
      {/* Header */}
      <header className="h-16 flex items-center justify-between px-6 border-b border-white/20">
        <h1 className="text-2xl font-bold">{t.title}</h1>
        <nav className="flex gap-4">
          {Object.entries(t.nav).map(([key, label]) => (
            <Button
              key={key}
              variant={activeTab === key ? "secondary" : "ghost"}
              className={`rounded-full px-6 ${
                theme === "dark" ? "text-white hover:bg-gray-700" : "text-white hover:bg-white/20"
              } ${activeTab === key ? (theme === "dark" ? "bg-gray-700" : "bg-white/30") : ""}`}
              onClick={() => setActiveTab(key as ActiveTab)}
            >
              {label}
            </Button>
          ))}
        </nav>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside className={`w-80 min-h-[calc(100vh-4rem)] p-6 ${sidebarClasses} border-r border-white/20`}>
          <h2 className="text-xl font-bold mb-6">{t.sidebar.personalization}</h2>

          {/* Font Size */}
          <div className="mb-8">
            <h3 className="font-semibold mb-3">{t.sidebar.fontSize}</h3>
            <div className="space-y-2">
              {(["small", "medium", "large"] as FontSize[]).map((size) => (
                <Button
                  key={size}
                  variant={fontSize === size ? "secondary" : "ghost"}
                  className={`w-full justify-start rounded-full ${
                    theme === "dark" ? "text-white hover:bg-gray-700" : "text-white hover:bg-white/20"
                  } ${fontSize === size ? (theme === "dark" ? "bg-gray-700" : "bg-white/30") : ""}`}
                  onClick={() => setFontSize(size)}
                >
                  {t.fontSizes[size]}
                </Button>
              ))}
            </div>
          </div>

          {/* Color Blindness */}
          <div className="mb-8">
            <h3 className="font-semibold mb-3">{t.sidebar.colorblind}</h3>
            <div className="space-y-2">
              <Button
                variant={colorBlindness === "none" ? "secondary" : "ghost"}
                className={`w-full justify-start rounded-full ${
                  theme === "dark" ? "text-white hover:bg-gray-700" : "text-white hover:bg-white/20"
                } ${colorBlindness === "none" ? (theme === "dark" ? "bg-gray-700" : "bg-white/30") : ""}`}
                onClick={() => setColorBlindness("none")}
              >
                Normal
              </Button>
              {(["deuteranopia", "protanopia", "tritanopia"] as ColorBlindness[]).map((type) => (
                <Button
                  key={type}
                  variant={colorBlindness === type ? "secondary" : "ghost"}
                  className={`w-full justify-start rounded-full ${
                    theme === "dark" ? "text-white hover:bg-gray-700" : "text-white hover:bg-white/20"
                  } ${colorBlindness === type ? (theme === "dark" ? "bg-gray-700" : "bg-white/30") : ""}`}
                  onClick={() => setColorBlindness(type)}
                >
                  {t.colorblindOptions[type]}
                </Button>
              ))}
            </div>
          </div>

          {/* Languages */}
          <div className="mb-8">
            <div className="flex items-center gap-2 mb-3">
              <Globe className="w-4 h-4" />
              <h3 className="font-semibold">{t.sidebar.languages}</h3>
            </div>
            <div className="space-y-2">
              {(Object.keys(translations) as Language[]).map((lang) => (
                <Button
                  key={lang}
                  variant={language === lang ? "secondary" : "ghost"}
                  className={`w-full justify-start rounded-full ${
                    theme === "dark" ? "text-white hover:bg-gray-700" : "text-white hover:bg-white/20"
                  } ${language === lang ? (theme === "dark" ? "bg-gray-700" : "bg-white/30") : ""}`}
                  onClick={() => setLanguage(lang)}
                >
                  {t.languageOptions[lang]}
                </Button>
              ))}
            </div>
          </div>

          {/* Theme Toggle */}
          <div>
            <div className="flex items-center gap-2 mb-3">
              {theme === "dark" ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
              <h3 className="font-semibold">{t.sidebar.darkTheme}</h3>
            </div>
            <Button
              variant="ghost"
              className={`w-full justify-start rounded-full ${
                theme === "dark" ? "text-white hover:bg-gray-700" : "text-white hover:bg-white/20"
              }`}
              onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
            >
              {theme === "dark" ? <Sun className="w-4 h-4 mr-2" /> : <Moon className="w-4 h-4 mr-2" />}
              {theme === "dark" ? "Tema claro" : "Tema escuro"}
            </Button>
          </div>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-8">{renderContent()}</main>
      </div>

      {/* Game Modals */}
      {activeGame === "memory" && (
        <MemoryGame language={language} theme={theme} colorBlindness={colorBlindness} onClose={closeGame} />
      )}

      {activeGame === "colorMatch" && (
        <ColorMatchGame language={language} theme={theme} colorBlindness={colorBlindness} onClose={closeGame} />
      )}

      {activeGame === "wordPuzzle" && (
        <WordPuzzleGame language={language} theme={theme} colorBlindness={colorBlindness} onClose={closeGame} />
      )}

      {activeGame === "rhythm" && (
        <RhythmGame language={language} theme={theme} colorBlindness={colorBlindness} onClose={closeGame} />
      )}
    </div>
  )
}
